//spring 初始化过程
 1 register 注册当前配置
 2 refresh 方法：
    prepareRefresh：预刷新
           initPropertySources ：初始化参数(空实现)
           getEnvironment().validateRequiredProperties()校验参数合法性
           this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>(); 存放早期的事件
    obtainFreshBeanFactory():获取beanFactory
            refreshBeanFactory：createBeanFactory()创建一个DefaultListableBeanFactory 的beanFactory
    prepareBeanFactory：beanFactory的预准备工作：加载部分postprocessor 以及注入aware组件
                        以及加载 参数1 getEnvironment spring环境配置
                        2 getEnvironment.getSystemProperties 加载的java环境
                        3 系统环境配置getSystemEnvironment 电脑环境变量

    postProcessBeanFactory： BeanFactory创建了以后的后置处理工作   （空实现）
    ################BeanFactory的创建#########################
 3 invokeBeanFactoryPostProcessors  执行BeanFactory的后置处理器
            1获取 BeanDefinitionRegistryPostProcessor （？ extends BeanFactPostprocessor）接口的 组件
            2 根据 BeanDefinitionRegistryPostProcessor 如果继承 PriorityOrdered 接口根据优先级排序 保存
                根据 BeanDefinitionRegistryPostProcessor 如果继承 Order 接口根据优先级排序 保存
            3 执行BeanDefinitionRegistryPostProcessor 的 postProcessBeanDefinitionRegistry执行
            4 再执行没有 PriorityOrdered 的BeanDefinitionRegistryPostProcessor 的 postProcessBeanDefinitionRegistry
            5   ## 执行BeanDefinitionRegistryPostProcessor的 postProcessBeanFactory
                ## 再执行 BeanFactoryPostProCeesor的postProcessBeanFactory
            优先级        BeanDefinitionRegistryPostProcessor>BeanFactoryPostProCeesor
                         postProcessBeanDefinitionRegistry > postProcessBeanFactory
                BeanDefinitionRegistryPostProcessor通过 PriorityOrdered 以及Order接口排序  PriorityOrdered优先级大于 Order
    #########################registerBeanPostProcessors 注册beanPostProcessor ##################################
 4 registerBeanPostProcessors
            1  同 BeanDefinitionRegistryPostProcessor BeanPostProcessor 也使用 ProprityOrder以及Order接口进行排序 选择执行优先权
                再加载 没有 ProprityOrder以及Order接口 的 BeanPostProcessor
            2  最后 增加 ApplicationListenerDetector 这个   BeanPostProcessor 的 postProcessAfterInitialization 方法会在 初始化之后
                判断对 组件是否继承 了 ApplicationListener  监听接口 如果有则添加监听器
   #####################  initMessageSource 国际化##################################
 5 initMessageSource
            1 首先判断是否 有实现 MessageResource组件  没有则注册 一个 DelegatingMessageSource 默认组件
              MessageResource.getMessage来获取国际化配置

 #####################initApplicationEventMulticaster 初始化派发器####################
 6 initApplicationEventMulticaster 初始化派发器
            创建默认的派发器SimpleApplicationEventMulticaster
 ######################onRefresh（空实现）预留的子类刷新方法####################
 7 onRefresh  空实现类 预留提供刷新功能

 ###########registerListeners 注册监听器  ####################
 8 registerListeners
            1 获取 所有实现了ApplicationListener 接口的组件 以及 早期的 事件  earlyApplicationEvents 添加到派发器中（ ApplicationContext.pushEvent()即将事件添加到earlyApplicationEvents的 集合中去  ）
 ########### 完成其他单实例bean的注册  ####################
 9 finishBeanFactoryInitialization
        preInstantiateSingletons：
            1 !bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()非抽象   非懒加载 单实例的bean才会选择被注册
            2  首先判断是否FactoryBean 是  则会创建一个 SmartFactoryBean 类型的工厂bean
            3  非FactoryBean 则会调用getBean-》doGetBean()->
                 1 mbd.getDependsOn() 创建bean首先判断是否有依赖的bean   首先创建依赖的bean getBean()
                 2 执行 createBean->resolveBeforeInstantiation()    首先执行InstantiationAwareBeanPostProcessor 后置处理器  执行 postProcessBeforeInstantiation后 再执行applyBeanPostProcessorsAfterInitialization
                 如果有对象返回则生成代理对象 ，否则 调用 doCreateBean()
                 3 doCreateBean: createBeanInstance 创建bean实例    ->applyMergedBeanDefinitionPostProcessors()方法为在创建完bean以后执行的 MergedBeanDefinitionPostProcessor 的postProcessMergedBeanDefinition
                    -》populateBean()初始化bean参数  赋值参数会用到 InstantiationAwareBeanPostProcessor后置处理器   先调用了 postProcessAfterInstantiation再调用了 postProcessPropertyValues方法进行赋值
                   initializeBean的调用bean初始化方法  invokeAwareMethods方法给为bean中 如果继承了 BeanFactoryAware BeanClassLoaderAware BeanNameAware 接口 方法赋值
                        applyBeanPostProcessorsBeforeInitialization  执行 invokeAwareInterfaces  给bean中如果 又实现aware接口 方法赋值  |  执行beanpostprocessor 后置处理器的 bean初始化的前置方法
                        invokeInitMethods 执行 初始化方法
                        applyBeanPostProcessorsAfterInitialization  执行beanpostprocee后置处理器的 bean初始化后的后置方法
            4 执行getbean方法之后会再次遍历一次 bean
                 对于 （EventListenerMethodProcessor）AnnotatedBeanDefinitionReader(这个组件是在 AnnotationConfigApplicationContext 构造时创建的) 组件 调用了 afterSingletonsInstantiated 方法 ——》processBean()
                   获取 组件方法上含有 EventListener 的方法 转换为 aplicationlistener 保存到this.applicationContext.addApplicationListener(applicationListener);中增加监听器
        registerDisposableBeanIfNecessary()  注册bean的销毁方法
            注： org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.singletonObjects 存放所有的 注册 bean 信息
 #############   完成刷新 ##############
 10 finishRefresh 刷新完成
        initLifecycleProcessor 初始化生命周期的 processor   在完成onRefresh  以及 onClose时调用 创建 了 DefaultLifecycleProcessor  后置处理器
        调用 getLifecycleProcessor().onRefresh();调用后置处理器的 onRefresh方法
        publishEvent(new ContextRefreshedEvent(this)); 发布ContextRefreshedEvent事件  即  onrefresh方法的调用完成、、
        registerApplicationContext 注册applicationContext




 //springMvc 容器的创建
  tomcat启动会记载 springMvc中的SpringServletContainerInitializer
   关联的 类有三个
       1。AbstractContextLoaderInitializer 创建了根容器 createRootApplicationContext()
       2。AbstractDispatcherServletInitializer  servletContext加入 registerDispatcherServlet  前端控制器servlet
       3。AbstractAnnotationConfigDispatcherServletInitializer 创建注解 的 前端控制器 servlet

   使用 注解的方式创建前端控制器需要实现 AbstractAnnotationConfigDispatcherServletInitializer 接口
        见(MyServletContainIniaition) 注解式的创建 创建父 spring容器 以及springMvc的容器



  // 生成定制化的 springMvC
   1 需要@EnableWebMvc   ：开启springMvc定制化配置  例如视图解析 静态资源方法等等 xml文件中可以配置springMVC的配置
      都可通过 在 创建容器中  通过 WebMvcConfigurer接口实现 定制化 springMVC修改默认配置（由于太多大多使用 WebMvcConfigurerAdapter）


